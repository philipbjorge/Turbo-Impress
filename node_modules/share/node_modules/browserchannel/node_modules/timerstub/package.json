{
  "author": {
    "name": "Joseph Gentle",
    "email": "josephg@gmail.com"
  },
  "name": "timerstub",
  "description": "Stubbed out timer objects for testing",
  "keywords": [
    "test",
    "stub",
    "timeout",
    "time"
  ],
  "version": "1.0.0",
  "repository": {
    "url": ""
  },
  "main": "index.js",
  "engines": {
    "node": "~0.8"
  },
  "scripts": {
    "test": "nodeunit test.coffee"
  },
  "dependencies": {
    "coffee-script": "~1"
  },
  "devDependencies": {
    "nodeunit": "*"
  },
  "readme": "# Timer stub\n\nThis is a super simple library to stub out the default javascript timer methods with something that\ndoesn't take any actual time to run. Because slow tests are for suckers!\n\nIf you're writing a library which uses timers (like [node-browserchannel](https://github.com/josephg/node-browserchannel)), its annoying to wait 30 seconds for your timeout event to fire.\n\n## Install it\n\n```\nnpm install timerstub\n```\n\nAdd it to your package.json:\n\n```json\n  \"dependencies\": {\n    \"timerstub\": \"*\"\n  }\n```\n\n\n## Use it\n\nTimer stub provides a replacement version of `setInterval`, `clearInterval`, `setTimeout`, `clearTimeout` and `Date.now` (through a wrapped `Date` function).\n\nInstead of needing to spend real time waiting for your queued methods to be called, you can now just call `timerstub.wait 1000, -> done()` to 'wait' 1000 milliseconds. Any queued intervals and timeouts will be called (in order) before your callback is called. Oh yeah, and `Date.now()` will return the right values in all the callbacks. As far as your library is concerned, 1000 milliseconds *have really passed*. But your test runs as fast as your CPU can manage it.\n\n\n## Example to copy+paste\n\nIn your library, write something like this:\n\n```coffeescript\n{setInterval, clearInterval, setTimeout, clearTimeout, Date} = {setInterval, clearInterval, setTimeout, clearTimeout, Date}\n\nexports.setTimeFunctions = (stubs) ->\n\t{setInterval, clearInterval, setTimeout, clearTimeout, Date} = stubs\n\n# Write the rest of your code as normal.\nexports.coolstuff = ->\n\ttimer = setTimeout (-> foo()), 1000\n\tstart = new Date\n\ttime = Date.now()\n\tclearTimeout timer\n\t# ...\n```\n\nIn a sequential testing framework like nodeunit:\n\n```coffeescript\ntimerstub = require 'timerstub'\nmycoollibrary = require './mycoollibrary'\n\nmycoollibrary.setTimeFunctions timerstub\n\nmodule.export = testCase\n\tsetUp: (callback) ->\n\t\ttimerstub.clearAll() # This removes all queued timeouts and whatnot\n\t\tcallback()\n\n\t'my cool test': (test) ->\n\t\tmycoollibrary.coolstuff()\n\t\ttimerstub.wait 1000, ->\n\t\t\t# Now 1000 milliseconds of setInterval calls and stuff have run... instantly!\n\t\t\ttest.strictEqual you.sexy, true\n\t\t\ttest.done()\n```\n\nIn a parallel testing framework like expresso, simply add a call to `timerstub.wait(100000000)` after all your tests have been scheduled. (In expresso, that would be in a `beforeExit` block).\n\ntesttimers should be compatible with all the testing frameworks - it doesn't interfere with the\ntesting framework at all.\n\n\n---\n\n## MIT Licensed\n\nLicensed under the standard MIT license:\n\nCopyright 2011 Joseph Gentle.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "_id": "timerstub@1.0.0",
  "_from": "timerstub@*"
}
