{
  "author": {
    "name": "Joseph Gentle",
    "email": "josephg@gmail.com",
    "url": "http://josephg.com/"
  },
  "name": "browserchannel",
  "description": "Google BrowserChannel server for NodeJS",
  "version": "1.0.0",
  "homepage": "https://github.com/josephg/node-browserchannel",
  "repository": {
    "type": "git",
    "url": "git://github.com/josephg/node-browserchannel.git"
  },
  "main": "index.js",
  "engine": "node >= 0.6.2",
  "scripts": {
    "test": "nodeunit test/server.coffee"
  },
  "dependencies": {
    "coffee-script": "~1",
    "hat": "*",
    "connect": "~2",
    "timerstub": "*",
    "request": "~2"
  },
  "devDependencies": {
    "browserify": "~1",
    "nodeunit": "*"
  },
  "readme": "A [BrowserChannel](http://closure-library.googlecode.com/svn/trunk/closure/goog/net/browserchannel.js) server.\n\n**tldr;** Its like socket.io, but it scales better and it has fewer bugs. It\njust does long polling. It doesn't support websockets and doesn't work cross-domain.\n\nBrowserChannel is google's version of [socket.io](http://socket.io) from when they first put\nchat in gmail. Unlike socket.io, browserchannel provides much better guarantees about message\ndelivery and state. It has better reconnection logic and error handling. With browserchannel,\n**you know whats going on**.\n\n[![Build Status](https://secure.travis-ci.org/josephg/node-browserchannel.png)](http://travis-ci.org/josephg/node-browserchannel)\n\nnode-browserchannel:\n\n- Is compatible with the closure library's browserchannel implementation\n- Is super thoroughly tested\n- Works in IE5.5+, iOS, Safari, Chrome, Firefox, and probably others.\n- Works in any network environment (incl. behind buffering proxies)\n\n---\n\n# Use it\n\n    # npm install browserchannel\n\nBrowserchannel is implemented as connect middleware. Here's an echo server:\n\n```coffeescript\nbrowserChannel = require('browserchannel').server\nconnect = require 'connect'\n\nserver = connect(\n  connect.static \"#{__dirname}/public\"\n  browserChannel (session) ->\n    console.log \"New session: #{session.id} from #{session.address} with cookies #{session.headers.cookie}\"\n\n    session.on 'message', (data) ->\n      console.log \"#{session.id} sent #{JSON.stringify data}\"\n      session.send data\n\n    session.on 'close', (reason) ->\n      console.log \"Session #{session.id} disconnected (#{reason})\"\n      \n    # This tells the session to stop trying to connect\n    session.stop()\n    \n    # This just kills the session.\n    session.abort()\n).listen(4321)\n\nconsole.log 'Echo server listening on localhost:4321'\n```\n\nThe client emulates the [websocket API](http://dev.w3.org/html5/websockets/). Here is a simple client:\n\n```coffeescript\n{BCSocket} = require 'browserchannel'\n\nsocket = new BCSocket 'http://localhost:4321/channel'\nsocket.onopen = ->\n  socket.send {hi:'there'}\nsocket.onmessage = (message) ->\n  console.log 'got message', message\n\n# later...\nsocket.close()\n```\n\n... Or from a website:\n\n```html\n<html><head>\n<script src='/channel/bcsocket.js'></script>\n<script>\nsocket = new BCSocket('/channel');\nsocket.onopen = function() {\n  socket.send({hi:'there'});\n  socket.close();\n};\nsocket.onmessage = function(message) {\n  // ...\n};\n</script>\n```\n\nYou can also ask the client to automatically reconnect whenever its been disconnected. - Which is\nsuper useful.\n\n```coffeescript\n{BCSocket} = require 'browserchannel'\nsocket = new BCSocket 'http://localhost:4321/channel', reconnect:true\nsocket.onopen = ->\n  socket.send \"I just connected!\"\n```\n\n---\n\n# Caveats\n\n- It doesn't do RPC.\n- It doesn't work in cross-origin environments. Put it behind \n  [nginx](http://nginx.net/) or [varnish](https://www.varnish-cache.org/) if you aren't using nodejs\n  to host your whole site.\n- Currently there's no websocket support. So, its higher bandwidth than socket.io running on modern\n  browsers.\n\n---\n\n# How to rebuild the client\n\nThe client uses google's [closure library](https://developers.google.com/closure/library/)\n& [compiler](https://developers.google.com/closure/compiler/). There's a couple small bugs that google\nstill hasn't fixed in their library (and probably never will), so I have a patch file kicking around.\n\nRebuilding the client library is annoying, so I keep an up to date compiled copy in `dist/`.\n\n1. Download the closure library\n\n```\nsvn checkout http://closure-library.googlecode.com/svn/trunk/ closure-library\ncd closure-library\n```\n\n2. Download the closure compiler\n\n```\ncurl http://closure-compiler.googlecode.com/files/compiler-latest.zip > compiler-latest.zip\nunzip compiler-latest.zip compiler.jar\n```\n\n3. Patch the library\n\n```\npatch -p0 <../node-browserchannel/closure-*.patch\n```\n\n4. Build\n\n```\ncd ../node-browserchannel\nmake\n```\n\n\n---\n\n### License\n\nLicensed under the standard MIT license:\n\nCopyright 2011 Joseph Gentle.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "_id": "browserchannel@1.0.0",
  "_from": "browserchannel@*"
}
