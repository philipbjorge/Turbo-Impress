// Generated by CoffeeScript 1.3.1
var checkMop, meta;

checkMop = function(meta, mop) {
  var _ref, _ref1;
  if (mop.id) {
    if (typeof mop.id !== 'string') {
      throw new Error("invalid id " + mop.id);
    }
    if (!mop.as && !meta.sessions[mop.id]) {
      throw new Error("Referenced session ID missing");
    }
    if (mop.p && ((_ref = mop.p) === 'cursor')) {
      throw new Error("Cannot change property " + mop.p);
    }
    if (mop.source && mop.source !== mop.id) {
      throw new Error("Not allowed to change another client's session data");
    }
    if (mop.as && typeof mop.as !== 'object') {
      throw new Error("Session objects must be objects");
    }
  } else {
    if (mop.p && ((_ref1 = mop.p) === 'sessions' || _ref1 === 'ctime' || _ref1 === 'mtime')) {
      throw new Error("Cannot change property " + mop.p);
    }
    if (mop.source) {
      throw new Error("Only the server can change the root document metadata");
    }
  }
};

meta = {
  name: 'meta',
  create: function(meta) {
    var now;
    now = Date.now();
    meta || (meta = {});
    meta.sessions = {};
    meta.ctime = now;
    meta.mtime = now;
    return meta;
  },
  applyOp: function(meta, type, opData, side) {
    var id, session, _ref, _ref1;
    if (side == null) {
      side = 'left';
    }
    if ((_ref = opData.meta) != null ? _ref.ts : void 0) {
      meta.mtime = opData.meta.ts;
      if (meta.ctime == null) {
        meta.ctime = meta.mtime;
      }
    }
    if (type.transformCursor) {
      _ref1 = meta.sessions;
      for (id in _ref1) {
        session = _ref1[id];
        if (session.cursor != null) {
          session.cursor = type.transformCursor(session.cursor, opData.op, side);
        }
      }
    }
    return meta;
  },
  applyMop: function(meta, mop) {
    checkMop(meta, mop);
    if (mop.as) {
      meta.sessions[mop.id] = mop.as;
    } else if (mop.rs) {
      delete meta.sessions[mop.id];
    } else if (mop.c != null) {
      meta.sessions[mop.id].cursor = mop.c;
    } else if (mop.p) {
      if (mop.id) {
        if (mop.v === void 0) {
          delete meta.sessions[mop.id][mop.p];
        } else {
          meta.sessions[mop.id][mop.p] = mop.v;
        }
      } else {
        if (mop.v === void 0) {
          delete meta[mop.p];
        } else {
          meta[mop.p] = mop.v;
        }
      }
    }
    return meta;
  },
  transform: function(type, mop, op, side) {
    var _ref;
    if (!type.transformCursor) {
      return mop;
    }
    if (mop.c != null) {
      type.transformCursor(mop.c, op, side);
    } else if (((_ref = mop.as) != null ? _ref.cursor : void 0) != null) {
      mop.as.cursor = type.transformCursor(mop.as.cursor, op, side);
    }
    return mop;
  }
};

if (typeof WEB !== "undefined" && WEB !== null) {
  exports.meta = meta;
} else {
  module.exports = meta;
}
