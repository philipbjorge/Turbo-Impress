kObjectConstructor = Object.prototype.constructor
kProtoKey = (typeof Object.prototype.__proto__ == 'object') ? '__proto__' : 'prototype'

# class(function cls, function parent, object prototype)
# class(function cls, function parent)
# class(function cls, object prototype)
# class(function cls)
export __class = ^{
  # Parse arguments
  T = arguments[0]
  if (arguments.length == 3) {
    # class(function parent, object prototype)
    parent = arguments[1]
    prototype = arguments[2]
    if ((t = typeof prototype) != 'object' && t != 'function')
      throw TypeError 'unexpected type '+t+' of second argument (expected object)'
  } else if (arguments.length == 2) {
    # class(object prototype)
    prototype = arguments[1]
    if ((t = typeof prototype) == 'function') {
      # class(function parent)
      parent = prototype
      prototype = undefined
    } else if (t != 'object') {
      throw TypeError 'unexpected type '+t+' of first argument (expected object or function)'
    }
  }

  # Make sure there's no keyword arguments signal in the prototype
  if (prototype && prototype.__kw == _MoveKWArgsT)
    delete prototype.__kw
  
  # Make prototype chain
  if (parent) {
    p = Object.create(parent.prototype || null)
    # Transfer values to the new prototype
    if (prototype) {
      Object.keys(prototype).forEach ^(key) {
        if ((value = prototype[key]) != undefined)
          p[key] = value
      }
    }
    prototype = p
  }
  
  # Configure T.prototype
  T.prototype = prototype || null
  T.constructor = undefined
  
  T
}

__class.create = ^{
  T = arguments[0]
  args = arguments[1]
  object = Object.create T.prototype
  if ((ctor = object.constructor) && ctor != kObjectConstructor && typeof ctor == 'function') {
    ctor.apply object, args
  } else if (typeof args[0] == 'object') {
    # Default constructor takes all keyword arguments/object and creates instance values
    extend object, args[0]
  }
  object
}
