# Tests slices (e.g. x[1:2])
import assert

# Read slices
x = [1,2,3,4]
assert.deepEqual x[0:0], []
assert.deepEqual x[0:1], [1]
assert.deepEqual x[0:2], [1,2]
assert.deepEqual x[0:3], [1,2,3]
assert.deepEqual x[0:4], [1,2,3,4]
assert.deepEqual x[0:], [1,2,3,4]

assert.deepEqual x[:0], []
assert.deepEqual x[:1], [1]
assert.deepEqual x[:2], [1,2]
assert.deepEqual x[:3], [1,2,3]
assert.deepEqual x[:4], [1,2,3,4]
assert.deepEqual x[:], [1,2,3,4]

assert.deepEqual x[1:0], []
assert.deepEqual x[1:1], []
assert.deepEqual x[1:2], [2]
assert.deepEqual x[1:3], [2,3]
assert.deepEqual x[1:4], [2,3,4]
assert.deepEqual x[1:], [2,3,4]

assert.deepEqual x[2:0], []
assert.deepEqual x[2:1], []
assert.deepEqual x[2:2], []
assert.deepEqual x[2:3], [3]
assert.deepEqual x[2:4], [3,4]
assert.deepEqual x[2:], [3,4]

assert.deepEqual x[1:4], [2,3,4]
assert.deepEqual x[1:4][1:2], [3]

# Negative end offsets reduce from end
assert.deepEqual x[:-1], [1,2,3]
assert.deepEqual x[:-2], [1,2]
assert.deepEqual x[:-3], [1]
assert.deepEqual x[:-4], []

# Negative start offsets
assert.deepEqual x[-1:], [4]
assert.deepEqual x[-2:], [3,4]
assert.deepEqual x[-3:], [2,3,4]
assert.deepEqual x[-4:], [1,2,3,4]

# Negative start and end offsets
assert.deepEqual x[-3:-1], [2,3]

# Invalid offsets should be handled in a clever way
assert.deepEqual x[:-9], []
assert.deepEqual x[9:123], []
assert.deepEqual x[-9:], [1,2,3,4]
assert.deepEqual x[-9:2], [1,2]

# Modify slices
x = [1,2,3,4]
x[1:1] = [9,8,7]
assert.deepEqual x, [1, 9,8,7, 2,3,4]

x = [1,2,3,4]
x[1:1] = 9
assert.deepEqual x, [1, 9, 2,3,4]

x = [1,2,3,4]
x[1:1] = []
assert.deepEqual x, [1,2,3,4]

x = [1,2,3,4]
x[1:3] = []
assert.deepEqual x, [1,4]

assert.deepEqual([1,2,3,4][1:2], [2])
